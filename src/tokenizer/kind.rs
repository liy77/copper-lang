#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum TokenKind {
    Identifier,
    Keyword,
    Operator,
    String,
    Number,
    Comment,
    Whitespace,
    Newline,
    For,
    Yield,
    Eof,
    Own,
    From,
    Import,
    ImportAll,
    As,
    Unknown,
    ParametersStart,
    ParametersEnd,
    ParenthesesStart,
    ParenthesesEnd,
    BracketStart,
    BracketEnd,
    BraceStart,
    BraceEnd,
    Comma,
    Dot,
    ReturnType,
    Symbol,
    Range,
    Param,
    ParamType,
    Public,
    Semicolon,
    Colon,
    CurrencySign,
    ModuleVar,
    ModulePath,
    Regex,
    Lifetime,
    Type,
    AngleStart,
    AngleEnd,
    Struct,
    Impl,
    Trait,
}

impl ToString for TokenKind {
    fn to_string(&self) -> String {
        match self {
            TokenKind::Identifier => "Identifier".to_string(),
            TokenKind::Keyword => "Keyword".to_string(),
            TokenKind::Operator => "Operator".to_string(),
            TokenKind::String => "String".to_string(),
            TokenKind::Number => "Number".to_string(),
            TokenKind::Comment => "Comment".to_string(),
            TokenKind::Whitespace => "Whitespace".to_string(),
            TokenKind::Newline => "Newline".to_string(),
            TokenKind::For => "For".to_string(),
            TokenKind::Yield => "Yield".to_string(),
            TokenKind::Eof => "Eof".to_string(),
            TokenKind::Own => "Own".to_string(),
            TokenKind::From => "From".to_string(),
            TokenKind::Import => "Import".to_string(),
            TokenKind::ImportAll => "ImportAll".to_string(),
            TokenKind::As => "As".to_string(),
            TokenKind::Unknown => "Unknown".to_string(),
            TokenKind::ParametersStart => "ParametersStart".to_string(),
            TokenKind::ParametersEnd => "ParametersEnd".to_string(),
            TokenKind::ParenthesesStart => "ParenthesesStart".to_string(),
            TokenKind::ParenthesesEnd => "ParenthesesEnd".to_string(),
            TokenKind::BracketStart => "BracketStart".to_string(),
            TokenKind::BracketEnd => "BracketEnd".to_string(),
            TokenKind::BraceStart => "BraceStart".to_string(),
            TokenKind::BraceEnd => "BraceEnd".to_string(),
            TokenKind::Comma => "Comma".to_string(),
            TokenKind::Dot => "Dot".to_string(),
            TokenKind::ReturnType => "ReturnType".to_string(),
            TokenKind::Symbol => "Symbol".to_string(),
            TokenKind::Range => "Range".to_string(),
            TokenKind::Param => "Param".to_string(),
            TokenKind::ParamType => "ParamType".to_string(),
            TokenKind::Public => "Public".to_string(),
            TokenKind::Semicolon => "Semicolon".to_string(),
            TokenKind::Colon => "Colon".to_string(),
            TokenKind::CurrencySign => "CurrencySign".to_string(),
            TokenKind::ModuleVar => "ModuleVar".to_string(),
            TokenKind::ModulePath => "ModulePath".to_string(),
            TokenKind::Regex => "Regex".to_string(),
            TokenKind::Lifetime => "Lifetime".to_string(),
            TokenKind::Type => "Type".to_string(),
            TokenKind::AngleStart => "AngleStart".to_string(),
            TokenKind::AngleEnd => "AngleEnd".to_string(),
            TokenKind::Struct => "Struct".to_string(),
            TokenKind::Impl => "Impl".to_string(),
            TokenKind::Trait => "Trait".to_string(),
        }
    }
}