pub mod kson;
pub mod properties;
pub mod fetch;

use std::fs;
use colored::Colorize;

use crate::{parser, tokenizer::tokenizer::Tokenizer};

pub const VERSION: &str = "0.1.0";

pub fn get_copper_version() -> String {
    let toml =  fs::read("./Cargo.toml").unwrap();
    let toml = String::from_utf8(toml).unwrap();

    let version = toml.split("version = \"").collect::<Vec<&str>>()[1].split("\"").collect::<Vec<&str>>()[0];

    return version.to_string();
}

pub fn print() {
    println!("üî• Using CForge v{}", VERSION);
    println!("‚õèÔ∏è  Using Copper v{}", get_copper_version());
}

pub fn compile(files: Vec<String>) {
    let copper_version = get_copper_version();

    for file in files {
        let c = fs::read(&file).unwrap();
        let c = String::from_utf8(c).unwrap();

        let mut tokenizer = Tokenizer::new(c);
        let tokens = tokenizer.tokenize();
        let result = parser::parse(tokens);

        println!("üî® Compiling {}", file);
        fs::create_dir_all("./dist/rust/src/").unwrap();

        let path = &format!("dist/rust/src/{}", file.split("/").last().unwrap().replace(".crs", ".rs"));

        let result = format!("// Generated by CForge v{} with Copper v{}\n{}", VERSION, copper_version, result);
        fs::write(path, result).unwrap();
        println!("üíΩ {} {} {}", file, "->".yellow(), path);
    }

    println!("‚úÖ Successfully compiled");
}

pub fn get_toml_package_name() -> String {
    let toml =  fs::read("./dist/rust/Cargo.toml").unwrap();
    let toml = String::from_utf8(toml).unwrap();

    let name = toml.split("name = \"").collect::<Vec<&str>>()[1].split("\"").collect::<Vec<&str>>()[0];

    return name.to_string();
}

pub fn get_toml_package_version() -> String {
    let toml =  fs::read("./dist/rust/Cargo.toml").unwrap();
    let toml = String::from_utf8(toml).unwrap();

    let version = toml.split("version = \"").collect::<Vec<&str>>()[1].split("\"").collect::<Vec<&str>>()[0];

    return version.to_string();
}

pub fn run() {
    let run = std::process::Command::new("cargo")
        .arg("run")
        .current_dir("./dist/rust")
        .output()
        .expect("ERROR");

    if run.status.success() {
        let stdout = String::from_utf8_lossy(&run.stdout);
        println!("ü¶¶ Running {} v{}:\n\n{}", get_toml_package_name(), get_toml_package_version(), stdout);
    } else {
        let stderr = String::from_utf8_lossy(&run.stderr);
        println!("üö® Error running compiled main file:\n\n{}", stderr);
    }
}

pub async fn generate_toml() {
    let properties = kson::read_properties(std::env::current_dir().unwrap().join("properties.kson").to_str().unwrap());
    let properties_obj = properties::Properties::from_kson(&properties).await;

    let toml = properties_obj.to_toml();

    fs::write("./dist/rust/Cargo.toml", toml).unwrap();
    println!("üì¶ Cargo.toml generated")
}
